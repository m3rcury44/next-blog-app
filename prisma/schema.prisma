datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]

  @@unique([id, name, image])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String    @id @default(cuid())
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  slug        String    @unique
  title       String
  description String
  content     String
  image       String?
  views       Int       @default(0)
  // tags        String[]
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  comments    Comment[]
}

model Comment {
  id          String   @id @default(cuid())
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String
  author      User?    @relation(fields: [authorId, authorName, authorImage], references: [id, name, image], onDelete: Cascade)
  authorId    String
  authorName  String
  authorImage String?
  content     String
  created_at  DateTime @default(now())
}
